generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  visitCount    Int       @default(1)
  lastVisit     DateTime  @default(now())
  firstVisit    DateTime  @default(now())
  role          String    @default("user")
  
  // OAuth session data
  accessToken   String?   @db.Text
  refreshToken  String?   @db.Text
  expiresAt     DateTime?
  lastEmailSync DateTime? // Timestamp of last email synchronization
  
  // Relations
  accounts      Account[]
  emails        Email[]   // Relation to emails
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String  @default("oauth")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Email {
  id          String       @id @default(cuid())
  messageId   String       @unique
  threadId    String
  userId      String
  subject     String?
  sender      String
  recipients  String[]     // Array of recipient email addresses
  body        String?      @db.Text
  bodyHtml    String?      @db.Text
  snippet     String?      @db.Text
  receivedAt  DateTime
  isRead      Boolean      @default(false)
  labels      String[]     // Array of Gmail labels
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Store attachment links directly
  attachmentLinks String[]  // Array of Google Drive links
  
  // Relation to attachments for detailed information
  attachments Attachment[]
  
  // Relation to user
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id          String   @id @default(cuid())
  emailId     String
  fileName    String
  mimeType    String
  fileSize    Int?
  driveFileId String   // Google Drive file ID
  driveLink   String   // Google Drive access link
  createdAt   DateTime @default(now())
  
  // Relation to email
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
}
