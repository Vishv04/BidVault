// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  visitCount    Int       @default(1)
  lastVisit     DateTime  @default(now())
  firstVisit    DateTime  @default(now())
  role          String    @default("user")
  accounts      Account[]
  // OAuth session data
  accessToken   String?   @db.Text
  refreshToken  String?   @db.Text
  expiresAt     DateTime?
  lastEmailSync DateTime? // Timestamp of last email synchronization
  emails        Email[]   // Relation to emails
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String  @default("oauth")
  
  // Provider specific data
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Email {
  id          String   @id @default(cuid())
  messageId   String   @unique
  threadId    String
  userId      String
  subject     String?
  sender      String
  recipients  String[]  // Array of recipient email addresses
  body        String?   @db.Text
  bodyHtml    String?   @db.Text
  snippet     String?   @db.Text
  receivedAt  DateTime
  isRead      Boolean   @default(false)
  labels      String[]  // Array of Gmail labels
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relation to user
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
